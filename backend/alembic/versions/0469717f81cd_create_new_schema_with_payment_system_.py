"""Create new schema with payment system and spatial support

Revision ID: 0469717f81cd
Revises: 
Create Date: 2025-09-06 16:09:14.055026

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import geoalchemy2

# revision identifiers, used by Alembic.
revision = '0469717f81cd'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Enable PostGIS extension for spatial data
    op.execute('CREATE EXTENSION IF NOT EXISTS "postgis"')
    
    op.create_table('publications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('publication_date', sa.Date(), nullable=False),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('title', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment="Multilingual titles: {de: 'German', fr: 'French', it: 'Italian', en: 'English'}"),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('canton', sa.String(length=10), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_publications_canton'), 'publications', ['canton'], unique=False)
    op.create_index(op.f('ix_publications_expiration_date'), 'publications', ['expiration_date'], unique=False)
    op.create_index(op.f('ix_publications_id'), 'publications', ['id'], unique=False)
    op.create_index(op.f('ix_publications_language'), 'publications', ['language'], unique=False)
    op.create_index(op.f('ix_publications_publication_date'), 'publications', ['publication_date'], unique=False)
    op.create_table('auctions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=True),
    sa.Column('location', sa.String(length=500), nullable=False),
    sa.Column('circulation_entry_deadline', sa.Date(), nullable=True),
    sa.Column('circulation_comment_deadline', sa.Text(), nullable=True),
    sa.Column('registration_entry_deadline', sa.Date(), nullable=True),
    sa.Column('registration_comment_deadline', sa.Text(), nullable=True),
    sa.Column('publication_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['publication_id'], ['publications.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_auctions_circulation_entry_deadline'), 'auctions', ['circulation_entry_deadline'], unique=False)
    op.create_index(op.f('ix_auctions_date'), 'auctions', ['date'], unique=False)
    op.create_index(op.f('ix_auctions_id'), 'auctions', ['id'], unique=False)
    op.create_index(op.f('ix_auctions_publication_id'), 'auctions', ['publication_id'], unique=False)
    op.create_index(op.f('ix_auctions_registration_entry_deadline'), 'auctions', ['registration_entry_deadline'], unique=False)
    op.create_table('contacts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('email', sa.String(length=200), nullable=True),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('contact_type', sa.String(length=100), nullable=True, comment="e.g., 'office', 'lawyer', 'court'"),
    sa.Column('office_id', sa.String(length=100), nullable=True),
    sa.Column('contains_post_office_box', sa.Boolean(), nullable=True),
    sa.Column('post_office_box', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Post office box details: {number: '123', zipCode: '1000', town: 'Bern'}"),
    sa.Column('publication_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['publication_id'], ['publications.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_contacts_id'), 'contacts', ['id'], unique=False)
    op.create_index(op.f('ix_contacts_publication_id'), 'contacts', ['publication_id'], unique=False)
    op.create_table('debtors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('debtor_type', sa.Enum('PERSON', 'COMPANY', name='debtortype'), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('prename', sa.String(length=200), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('country_of_origin', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Country information: {name: {de: 'Deutschland', fr: 'Allemagne'}, isoCode: 'DE'}"),
    sa.Column('residence_type', sa.String(length=50), nullable=True, comment="e.g., 'switzerland', 'abroad'"),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=20), nullable=True),
    sa.Column('legal_form', sa.String(length=100), nullable=True),
    sa.Column('publication_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['publication_id'], ['publications.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_debtors_debtor_type'), 'debtors', ['debtor_type'], unique=False)
    op.create_index(op.f('ix_debtors_id'), 'debtors', ['id'], unique=False)
    op.create_index(op.f('ix_debtors_name'), 'debtors', ['name'], unique=False)
    op.create_index(op.f('ix_debtors_publication_id'), 'debtors', ['publication_id'], unique=False)
    op.create_table('auction_objects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('parcel_number', sa.String(length=100), nullable=True),
    sa.Column('property_number', sa.String(length=100), nullable=True),
    sa.Column('surface_area', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('estimated_value', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('property_type', sa.String(length=100), nullable=True),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('municipality', sa.String(length=100), nullable=True),
    sa.Column('canton', sa.String(length=10), nullable=True),
    sa.Column('coordinates', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('latitude', sa.Numeric(precision=10, scale=8), nullable=True),
    sa.Column('longitude', sa.Numeric(precision=11, scale=8), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('auction_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['auction_id'], ['auctions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute('CREATE INDEX IF NOT EXISTS idx_auction_objects_coordinates ON auction_objects USING gist (coordinates)')
    op.create_index(op.f('ix_auction_objects_auction_id'), 'auction_objects', ['auction_id'], unique=False)
    op.create_index(op.f('ix_auction_objects_id'), 'auction_objects', ['id'], unique=False)
    op.create_index(op.f('ix_auction_objects_parcel_number'), 'auction_objects', ['parcel_number'], unique=False)
    op.create_index(op.f('ix_auction_objects_property_number'), 'auction_objects', ['property_number'], unique=False)
    op.create_table('auction_views',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('auction_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='User ID if logged in, null for anonymous'),
    sa.Column('view_type', sa.Enum('LIST', 'DETAIL', 'MAP', name='viewtype'), nullable=False),
    sa.Column('viewed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IPv4 or IPv6 address'),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('referrer', sa.String(length=500), nullable=True),
    sa.Column('session_id', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['auction_id'], ['auctions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_auction_views_auction_id'), 'auction_views', ['auction_id'], unique=False)
    op.create_index(op.f('ix_auction_views_id'), 'auction_views', ['id'], unique=False)
    op.create_index(op.f('ix_auction_views_session_id'), 'auction_views', ['session_id'], unique=False)
    op.create_index(op.f('ix_auction_views_user_id'), 'auction_views', ['user_id'], unique=False)
    op.create_index(op.f('ix_auction_views_view_type'), 'auction_views', ['view_type'], unique=False)
    op.create_index(op.f('ix_auction_views_viewed_at'), 'auction_views', ['viewed_at'], unique=False)
    op.create_table('user_subscriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='External user ID (from auth system)'),
    sa.Column('auction_id', sa.UUID(), nullable=False),
    sa.Column('subscription_type', sa.Enum('BASIC', 'PREMIUM', name='subscriptiontype'), nullable=False),
    sa.Column('purchase_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('payment_id', sa.String(length=200), nullable=True, comment='External payment system ID'),
    sa.Column('amount_paid', sa.String(length=20), nullable=True, comment='Amount paid in CHF'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['auction_id'], ['auctions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_subscriptions_auction_id'), 'user_subscriptions', ['auction_id'], unique=False)
    op.create_index(op.f('ix_user_subscriptions_id'), 'user_subscriptions', ['id'], unique=False)
    op.create_index(op.f('ix_user_subscriptions_user_id'), 'user_subscriptions', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_subscriptions_user_id'), table_name='user_subscriptions')
    op.drop_index(op.f('ix_user_subscriptions_id'), table_name='user_subscriptions')
    op.drop_index(op.f('ix_user_subscriptions_auction_id'), table_name='user_subscriptions')
    op.drop_table('user_subscriptions')
    op.drop_index(op.f('ix_auction_views_viewed_at'), table_name='auction_views')
    op.drop_index(op.f('ix_auction_views_view_type'), table_name='auction_views')
    op.drop_index(op.f('ix_auction_views_user_id'), table_name='auction_views')
    op.drop_index(op.f('ix_auction_views_session_id'), table_name='auction_views')
    op.drop_index(op.f('ix_auction_views_id'), table_name='auction_views')
    op.drop_index(op.f('ix_auction_views_auction_id'), table_name='auction_views')
    op.drop_table('auction_views')
    op.drop_index(op.f('ix_auction_objects_property_number'), table_name='auction_objects')
    op.drop_index(op.f('ix_auction_objects_parcel_number'), table_name='auction_objects')
    op.drop_index(op.f('ix_auction_objects_id'), table_name='auction_objects')
    op.drop_index(op.f('ix_auction_objects_coordinates'), table_name='auction_objects')
    op.drop_index(op.f('ix_auction_objects_auction_id'), table_name='auction_objects')
    op.drop_index('idx_auction_objects_coordinates', table_name='auction_objects', postgresql_using='gist')
    op.drop_table('auction_objects')
    op.drop_index(op.f('ix_debtors_publication_id'), table_name='debtors')
    op.drop_index(op.f('ix_debtors_name'), table_name='debtors')
    op.drop_index(op.f('ix_debtors_id'), table_name='debtors')
    op.drop_index(op.f('ix_debtors_debtor_type'), table_name='debtors')
    op.drop_table('debtors')
    op.drop_index(op.f('ix_contacts_publication_id'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_id'), table_name='contacts')
    op.drop_table('contacts')
    op.drop_index(op.f('ix_auctions_registration_entry_deadline'), table_name='auctions')
    op.drop_index(op.f('ix_auctions_publication_id'), table_name='auctions')
    op.drop_index(op.f('ix_auctions_id'), table_name='auctions')
    op.drop_index(op.f('ix_auctions_date'), table_name='auctions')
    op.drop_index(op.f('ix_auctions_circulation_entry_deadline'), table_name='auctions')
    op.drop_table('auctions')
    op.drop_index(op.f('ix_publications_publication_date'), table_name='publications')
    op.drop_index(op.f('ix_publications_language'), table_name='publications')
    op.drop_index(op.f('ix_publications_id'), table_name='publications')
    op.drop_index(op.f('ix_publications_expiration_date'), table_name='publications')
    op.drop_index(op.f('ix_publications_canton'), table_name='publications')
    op.drop_table('publications')
    # ### end Alembic commands ###
